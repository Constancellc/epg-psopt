Things to get the networks into a form for voltage linearization.

First: copy a version of the script, rename as *_z.dss.


======
I: linearize_manc_py.py
Here we mostly need to reorder so that the _y version 

1. reorder things (next to sourcebus first; loads/caps to end)
2. Change 3ph delta loads to 3x1ph loads
3. Change loads to constant power (if wanted) and fix voltages

If regulators, go to II.
--------
Ia: create the *_y_z file:

4. make sourcebus -> sourcebus_y in downstream element to remove
5. remove all loads/caps as required

If there are no regulators, this is then complete.

======
II: fixed_voltage_testing
We need to insert an additional line to connect the meter to to get the elements downstream, ie

b0--Reg--b0r 
to
b0--Reg--b0r0--Line+meter--b0r.

For each regulator X,
6. Change regulator secondary bus to *r0
7. Add a switch (line) from *r0 to *r, called line.X (e.g. new line.X bus1=634r0 bus2=634r phases=3 switch=true)
8. Before Add a new meter at the substation: new energymeter.msub element=transformer.sub
9. Add a new meter for each regulator: new energymeter.mX element=line.X
10. Naming convention: Try to call all regulators reg\s\i e.g. regD2 (not cregX); call gang operated regulators *G (like regxG)

If no LTC, Return to Ia.

Otherwise:
10a. Copy to a new script with *Mod_z; then, go to Ia and repeat for both *Mod_z and *_z files.

======
III: ltc_voltage_testing
We need to get the 'tree' of regulators to work out which injections go through which regulators
as we have a tree network.

Each 'regulator' can be 3ph-gang; 3x1ph; 1ph; 2ph.

zoneSet then needs to be chosen according to the splitting up of these regulators

Note: setting band=1 on regulators tends to lead to a tighter response for LTC solutions.




